// Mocks generated by Mockito 5.4.4 from annotations
// in contacts_app/test/step/the_app_is_running.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:contacts_app/bloc/contacts_list/contacts_list_bloc.dart' as _i2;
import 'package:contacts_app/entity/contact_entity.dart' as _i3;
import 'package:contacts_app/model/contact.dart' as _i4;
import 'package:contacts_app/model/json_contact.dart' as _i7;
import 'package:contacts_app/repository/contacts_repository.dart' as _i5;
import 'package:contacts_app/shared/log_service.dart' as _i9;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeContactsListState_0 extends _i1.SmartFake
    implements _i2.ContactsListState {
  _FakeContactsListState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContactEntity_1 extends _i1.SmartFake implements _i3.ContactEntity {
  _FakeContactEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$ContactCopyWith_2<$Res> extends _i1.SmartFake
    implements _i4.$ContactCopyWith<$Res> {
  _Fake$ContactCopyWith_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContactsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactsRepository extends _i1.Mock
    implements _i5.ContactsRepository {
  @override
  _i6.Future<List<_i7.JsonContact>> getInitialContacts(
          {required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInitialContacts,
          [],
          {#path: path},
        ),
        returnValue:
            _i6.Future<List<_i7.JsonContact>>.value(<_i7.JsonContact>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i7.JsonContact>>.value(<_i7.JsonContact>[]),
      ) as _i6.Future<List<_i7.JsonContact>>);

  @override
  _i6.Future<bool> hasLocalContacts() => (super.noSuchMethod(
        Invocation.method(
          #hasLocalContacts,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Stream<List<_i3.ContactEntity>> watchLocalContacts() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLocalContacts,
          [],
        ),
        returnValue: _i6.Stream<List<_i3.ContactEntity>>.empty(),
        returnValueForMissingStub: _i6.Stream<List<_i3.ContactEntity>>.empty(),
      ) as _i6.Stream<List<_i3.ContactEntity>>);

  @override
  void saveContacts({required List<_i7.JsonContact>? contacts}) =>
      super.noSuchMethod(
        Invocation.method(
          #saveContacts,
          [],
          {#contacts: contacts},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void saveContact({required _i7.JsonContact? contact}) => super.noSuchMethod(
        Invocation.method(
          #saveContact,
          [],
          {#contact: contact},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateContact({required _i4.Contact? contact}) => super.noSuchMethod(
        Invocation.method(
          #updateContact,
          [],
          {#contact: contact},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteContact({required int? id}) => super.noSuchMethod(
        Invocation.method(
          #deleteContact,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Contact? getContact({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getContact,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      ) as _i4.Contact?);
}

/// A class which mocks [ContactsListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactsListBloc extends _i1.Mock implements _i2.ContactsListBloc {
  @override
  _i2.ContactsListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeContactsListState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeContactsListState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ContactsListState);

  @override
  _i6.Stream<_i2.ContactsListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i2.ContactsListState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i2.ContactsListState>.empty(),
      ) as _i6.Stream<_i2.ContactsListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i2.ContactsListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.ContactsListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.ContactsListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.ContactsListEvent>(
    _i8.EventHandler<E, _i2.ContactsListState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i8.Transition<_i2.ContactsListEvent, _i2.ContactsListState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i8.Change<_i2.ContactsListState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogService extends _i1.Mock implements _i9.LogService {
  @override
  void e({
    required dynamic error,
    required StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [],
          {
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(String? message) => super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void t(String? message) => super.noSuchMethod(
        Invocation.method(
          #t,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(String? message) => super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(String? message) => super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Contact].
///
/// See the documentation for Mockito's code generation for more information.
class MockContact extends _i1.Mock implements _i4.Contact {
  @override
  String get fullName => (super.noSuchMethod(
        Invocation.getter(#fullName),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#fullName),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#fullName),
        ),
      ) as String);

  @override
  String get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#address),
        ),
      ) as String);

  @override
  _i3.ContactEntity get entity => (super.noSuchMethod(
        Invocation.getter(#entity),
        returnValue: _FakeContactEntity_1(
          this,
          Invocation.getter(#entity),
        ),
        returnValueForMissingStub: _FakeContactEntity_1(
          this,
          Invocation.getter(#entity),
        ),
      ) as _i3.ContactEntity);

  @override
  int get entityId => (super.noSuchMethod(
        Invocation.getter(#entityId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get contactId => (super.noSuchMethod(
        Invocation.getter(#contactId),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#contactId),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#contactId),
        ),
      ) as String);

  @override
  String get firstName => (super.noSuchMethod(
        Invocation.getter(#firstName),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#firstName),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#firstName),
        ),
      ) as String);

  @override
  String get lastName => (super.noSuchMethod(
        Invocation.getter(#lastName),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#lastName),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#lastName),
        ),
      ) as String);

  @override
  String get phoneNumber => (super.noSuchMethod(
        Invocation.getter(#phoneNumber),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#phoneNumber),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#phoneNumber),
        ),
      ) as String);

  @override
  _i4.$ContactCopyWith<_i4.Contact> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$ContactCopyWith_2<_i4.Contact>(
          this,
          Invocation.getter(#copyWith),
        ),
        returnValueForMissingStub: _Fake$ContactCopyWith_2<_i4.Contact>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i4.$ContactCopyWith<_i4.Contact>);
}
